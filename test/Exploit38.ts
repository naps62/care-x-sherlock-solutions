import { ethers } from "hardhat";
import { expect } from "chai";

import type { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import type { ContractFactory } from "ethers";
import type { ISetup, Exploit38 } from "../typechain-types";
import { ISetup__factory } from "../typechain-types";

const { parseUnits } = ethers.utils;

import * as ForkHelpers from "./shared/forkHelpers";

describe("", () => {
  let owner: SignerWithAddress;
  let alice: SignerWithAddress;
  let bob: SignerWithAddress;

  const setupAddr = "0x76BB80b4F1bA62eD2665f537f605C3593daCc458";
  const challengeAddr = "0x43c3E684cfCD27083f7156E7d883FC7e449e1c59";

  let setup: ISetup;
  let Exploit: ContractFactory;
  let exploit: Exploit38;

  beforeEach(async () => {
    await ForkHelpers.forkToGoerli(6385078);

    [owner, alice, bob] = await ethers.getSigners();

    Exploit = await ethers.getContractFactory("Exploit38");

    setup = ISetup__factory.connect(setupAddr, owner);
  });

  it("works", async () => {
    const exploit = await Exploit.deploy(challengeAddr);
    await exploit.finalize({ value: parseUnits("1") });

    expect(await setup.isSolved()).to.be.true;
  });
});
