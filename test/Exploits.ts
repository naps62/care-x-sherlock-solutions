import { ethers } from "hardhat";
import { expect } from "chai";

import type { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import type { ContractFactory } from "ethers";
import type { ISetup, Exploit5 } from "../typechain-types";
import { ISetup__factory } from "../typechain-types";

import Challenges from "../challenges";

const { parseUnits } = ethers.utils;

import * as ForkHelpers from "./shared/forkHelpers";

describe("", () => {
  let owner: SignerWithAddress;
  let alice: SignerWithAddress;
  let bob: SignerWithAddress;

  beforeEach(async () => {
    await ForkHelpers.forkToGoerli(6385078);

    [owner, alice, bob] = await ethers.getSigners();
  });

  let i = 0;
  for (const item of Object.keys(Challenges)) {
    const { status, challenge, setup, deployValue, finalizeValue } =
      Challenges[item];

    switch (status) {
      case "done":
        it(`solving ${i}`, async () => {
          const Exploit = await ethers.getContractFactory(`Exploit${i}`);

          let deployOpts = {};
          if (!!deployValue) {
            deployOpts = { value: parseUnits(deployValue) };
          }
          const exploit = await Exploit.deploy(challenge, deployOpts);

          let finalizeOpts = {};
          if (!!finalizeValue) {
            finalizeOpts = { value: parseUnits(finalizeValue) };
          }
          await exploit.finalize(finalizeOpts);
          const setupContract = ISetup__factory.connect(setup, owner);
          expect(await setupContract.isSolved()).to.be.true;
        });
    }

    i++;
  }
});
